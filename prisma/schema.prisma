generator client {
	provider        = "prisma-client-js"
	previewFeatures = ["relationJoins"]
}

datasource db {
	provider          = "mysql"
	url               = env("DATABASE_URL")
	shadowDatabaseUrl = env("TEST_DATABASE_URL")
}

model School {
	id Int @id @default(autoincrement()) @db.UnsignedInt

	name String?

	/// The domain name associated with the school's Google Cloud organization
	/// See: https://developers.google.com/identity/openid-connect/openid-connect#hd-param
	domain String @unique

	users User[]
}

model User {
	id Int @id @default(autoincrement()) @db.UnsignedInt

	name      String?
	picture   String? @db.Text
	isTeacher Boolean @default(false)
	allowed   Boolean @default(false)

	/// The value used to uniquely the user's Google account
	/// See: https://developers.google.com/identity/openid-connect/openid-connect#obtainuserinfo
	googleSub String @unique @db.VarChar(255)

	school   School @relation(fields: [schoolId], references: [id])
	schoolId Int    @db.UnsignedInt

	sessions    Session[]
	createdMaps Map[]
	players     Player[]
}

/// A sign-in session, allowing the user to access the game from the same browser without signing back in
model Session {
	uuidBin Bytes @unique @db.Binary(16) /// The session identifier, converted to binary

	createdAt DateTime @default(now())
	expires   DateTime @db.Timestamp(0)

	user   User @relation(fields: [userId], references: [id])
	userId Int  @db.UnsignedInt
}

model Map {
	id Int @id @default(autoincrement()) @db.UnsignedInt

	imgURL String  @db.Text /// URL of the raw SVG file
	name   String?

	creator   User @relation(fields: [creatorId], references: [id])
	creatorId Int  @db.UnsignedInt

	rooms Room[]
	doors Door[]
	games Game[]
}

model Room {
	id Int @id @default(autoincrement()) @db.UnsignedInt

	name         String?
	svgRef       Int     @db.UnsignedInt /// The data-room value for the SVG element representing this room
	isSpawnpoint Boolean @default(false) /// Whether players can start in this room when joining a game

	map   Map @relation(fields: [mapId], references: [id])
	mapId Int @db.UnsignedInt

	// Primary/secondary is arbitrary and carries little use
	// Prisma does not offer a way to combine these into a single `doors` relation
	// If looking for all the doors in a room, these two should be combined
	primaryDoors   Door[] @relation("room1")
	secondaryDoors Door[] @relation("room2")

	playersInside  Player[]      @relation("currRoom")
	queuedPlayers  Player[]      @relation("roomQueue")
	gamesClaimedIn ClaimedRoom[]

	@@unique([mapId, svgRef])
}

model Door {
	id Int @id @default(autoincrement()) @db.UnsignedInt

	map   Map @relation(fields: [mapId], references: [id])
	mapId Int @db.UnsignedInt

	// The rooms (nodes) the door (edge) connects
	room1 Room @relation("room1", fields: [mapId, svgRef1], references: [mapId, svgRef])
	room2 Room @relation("room2", fields: [mapId, svgRef2], references: [mapId, svgRef])

	// svgRef1 must be smaller than svgRef2 to prevent duplicate doors
	/// Must be smaller than svgRef1
	svgRef1 Int @db.UnsignedInt
	/// Must be larger than svgRef2
	svgRef2 Int @db.UnsignedInt

	@@unique([mapId, svgRef1, svgRef2])
}

model Topic {
	id Int @id @default(autoincrement()) @db.UnsignedInt

	name String @unique

	definitions Definition[]
}

model Definition {
	id Int @id @default(autoincrement()) @db.UnsignedInt

	answerRegex   String /// A regex which exactly matches any correct answers, e.g: "(pc )?case|mother(-| )?board"
	difficulty    Int     @db.TinyInt
	definition    String  @db.Text // e.g: "Skeleton of the computer"
	wordClass     String? @db.VarChar(15) // e.g: "noun"
	usageTemplate String? @db.Text // e.g: "The CPU is installed to the {answer}"

	topic   Topic @relation(fields: [topicId], references: [id])
	topicId Int   @db.UnsignedInt

	playersAnswering Player[]
}

model Game {
	id Int @id @default(autoincrement()) @db.UnsignedInt

	createdAt DateTime  @default(now())
	state     GameState @default(LOBBY)

	map   Map @relation(fields: [mapId], references: [id])
	mapId Int @db.UnsignedInt

	players      Player[]
	claimedRooms ClaimedRoom[]
}

enum GameState {
	LOBBY
	ONGOING
	ENDED
}

/// A user's data for a specific game
model Player {
	id Int @id @default(autoincrement()) @db.UnsignedInt

	points Int     @default(0) @db.UnsignedInt
	isHost Boolean @default(false)
	kicked Boolean @default(false)

	user   User @relation(fields: [userId], references: [id])
	userId Int  @db.UnsignedInt

	game   Game @relation(fields: [gameId], references: [id])
	gameId Int  @db.UnsignedInt

	/// The room the player is currently in
	currRoom   Room @relation("currRoom", fields: [currRoomId], references: [id])
	currRoomId Int  @db.UnsignedInt

	/// The room the player is currently trying to move to via a question
	currMove   Room? @relation("roomQueue", fields: [currMoveId], references: [id])
	currMoveId Int?  @db.UnsignedInt

	/// The question the player is currently answering
	currQuestion   Definition? @relation(fields: [currQuestionId], references: [id])
	currQuestionId Int?        @db.UnsignedInt

	@@unique([userId, gameId])
}

/// The state of a room being claimed in a specific game (a room can be claimed in multiple games)
model ClaimedRoom {
	room   Room @relation(fields: [roomId], references: [id])
	roomId Int  @db.UnsignedInt

	game   Game @relation(fields: [gameId], references: [id])
	gameId Int  @db.UnsignedInt

	@@id([roomId, gameId])
}

/// An item in the shop
model ShopItem {
	id Int @id @default(autoincrement()) @db.UnsignedInt

	name        String  @unique
	description String? @db.Text
	cost        Int @db.UnsignedInt

	/// What happens when you buy the item
	/// Actions are defined in /src/routes/game/[gameId=id]/shop/[itemId=id]/buy/+server.ts
	action String
}
